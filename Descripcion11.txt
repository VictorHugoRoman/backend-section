***Implementando Unit Testing***
        Mide la calidad de nuestro codigo, en el curso la implementamos solo en la entidad de usuarios.
        existen diferentes tipos de test como integrationTest, stressTest, unitTest. En el cursos implementamos unit test a los repositorios
        y a los servicios para garantizarno q la informacion y el requirimiento como tal se está cumnpliendo, ya  q d esta
        forma no es necesario probar todos los endPoint uno a uno ya q si hacemos los test de todas las entidades y pasan
        podemos garantizar al 100% q nuestro codigo cumple con los requirimientos principales de la aplicacion.

Paso 1: Checar si tenemos el paquete jest insatalado sino instalarlo como dependencia de desarrollo.
        no habra necesidad de hacer require del paquete para usarlo ya q jest se instala de forma global.
Paso 2: Crear el archivo jest.config en la raiz del proyecto.
Paso 3: Crear la carpeta Tests, aqui estaran todos los test.
        3.1 Crear una carpeta dentro de Tests nombrada mocks, aqui van los tests mocks q son basicamente como una lata falsa q servirá para probar nuestro codigo.
                3.1.2 Crear un carpeta nombrada User, esta asume a la entidad usuario.
                        3.2.1 Crear un archivo nombrado user.model.mock.js, este es el mock del modelo.
                        3.2.2 Crear un mock o archivo nombrado user.repository.mock.js, este es el mock para el repositorio del user.
                3.1.3 Crear el index.js para la capa y exportar los mocks q hemos creado.
        3.2 Crear una carpeta dentro de Tests nombrada unit, aqui van los tests unitarios o pruebas unitarias.
                3.2.1 Crear la carpeta repositories, aqui son practicamente los repositorios de cada entidad q queremos testear.
                        3.2.1.1 Crear el archivo user.repository.test.js, test o prueba para nuestro user.repository
                3.2.2 Probamos el Test Unit user.repository.test.js
                        3.2.2.1 Ir al package.json e irnos a la propiedad Scripts > test 
                                borramos el valor q tiene por defecto y ponemos jest, en la terminal escribimos el comando npm run test.
                                debe arrojar lo sig. Test Suites: 1 passed, Tests: 5 passed
                3.2.3 Crear la carpeta services, aqui son practicamente los servicios de cada entidad q queremos testear.
                        3.2.3.1 Probamos el Test Unit user.service.test.js                        
                                en la terminal escribimos el comando npm run test, debe arrojar lo sig. Test Suites: 2 passed, Tests: 10 passed
Paso 4: Hacer Commit.


Nota: enviamos los cambios .env por ser un curso pero en un proyecto real no debe enviarse por seguridad, esto lo ignoramos en nuestro .gitignore

Comentarios:
-Test Suites: son las pruebas en si (describe())
-Tests: son lo metodos q contienen las pruebas lo que esta dentro de describe()
-Mock: Los mocks son  objetos preprogramados con expectativas que forman una especificación de las llamadas que se espera recibir.
        Un mock va más allá que un stub, un mock te indica algo como «espero que llames a esté método y que si lo haces con un 
        específico argumento de entrada, obtendrás una respuesta concreta».
-Git: el comando Undo Last Commit te regresa el ultimo commit que hiciste.
-Solo un pequeño dato que espero les sirva, se puede evitar escribir node_modules/.bin/sequelize utilizando el comando npx que es propio de npm.
        Ej. npx sequelize [comando] o explicitamente "npx sequelize init"
        npx se encarga de buscar por nosotros en la carpeta de node_modules.
-Dot notation: car.seats -> "cloth"
-Bracket notation: car["seats"] -> "cloth"